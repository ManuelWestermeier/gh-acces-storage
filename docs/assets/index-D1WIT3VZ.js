(function(){const i=document.createElement("link").relList;if(i&&i.supports&&i.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))o(t);new MutationObserver(t=>{for(const n of t)if(n.type==="childList")for(const e of n.addedNodes)e.tagName==="LINK"&&e.rel==="modulepreload"&&o(e)}).observe(document,{childList:!0,subtree:!0});function s(t){const n={};return t.integrity&&(n.integrity=t.integrity),t.referrerPolicy&&(n.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?n.credentials="include":t.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function o(t){if(t.ep)return;t.ep=!0;const n=s(t);fetch(t.href,n)}})();const H=new TextEncoder,M=new TextDecoder;async function T(r){const i=await crypto.subtle.digest("SHA-256",H.encode(r)),s=await crypto.subtle.digest("SHA-256",i);return crypto.subtle.importKey("raw",s,{name:"AES-CBC"},!1,["encrypt","decrypt"])}async function N(r,i){const s=crypto.getRandomValues(new Uint8Array(16)),o=await T(i),t=H.encode(r),n=await crypto.subtle.encrypt({name:"AES-CBC",iv:s},o,t),e=new Uint8Array(s.length+n.byteLength);return e.set(s,0),e.set(new Uint8Array(n),s.length),btoa(String.fromCharCode(...e))}async function L(r,i){const s=Uint8Array.from(atob(r),a=>a.charCodeAt(0)),o=s.slice(0,16),t=s.slice(16),n=await T(i),e=await crypto.subtle.decrypt({name:"AES-CBC",iv:o},n,t);return M.decode(e)}const w=(()=>{const r="data-data",i="main",s="https://api.github.com";let o="",t="";function n(c){return crypto.subtle.digest("SHA-256",new TextEncoder().encode(c)).then(u=>Array.from(new Uint8Array(u)).map(l=>l.toString(16).padStart(2,"0")).join(""))}async function e(c,u,l=null){const y=await fetch(u,{method:c,headers:{Authorization:`Bearer ${o}`,Accept:"application/vnd.github+json","Content-Type":"application/json"},body:l?JSON.stringify(l):void 0});if(!y.ok)throw new Error(await y.text());return y.json()}async function a(c){try{return await e("GET",`${s}/repos/${t}/${r}/contents/${c}?ref=${i}`)}catch{return null}}async function d(c,u){const l=await a(c),y={message:new Date,content:btoa(u),branch:i};return l&&(y.sha=l.sha),e("PUT",`${s}/repos/${t}/${r}/contents/${c}`,y)}async function m(c,u){const l=await a(c);if(!l)return;const y={message:u,sha:l.sha,branch:i};return e("DELETE",`${s}/repos/${t}/${r}/contents/${c}`,y)}async function h(c){const u=[];for(let l=0;l<c.length;l+=1e5)u.push(c.slice(l,l+1e5));return u}async function f(c){const u=await n(`${c}/length.dat`),l=await a(u);if(!l)return null;const y=parseInt(atob(l.content));let p="";for(let b=0;b<y;b++){const S=await n(`${c}/${b}.dat`),k=await a(S);if(!k)break;p+=atob(k.content)}return p}async function E(c,u){const l=await h(u);for(let p=0;p<l.length;p++){const b=await n(`${c}/${p}.dat`);await d(b,l[p])}const y=await n(`${c}/length.dat`);await d(y,String(l.length))}async function C(c){const u=await n(`${c}/length.dat`),l=await a(u);if(!l)return;const y=parseInt(atob(l.content));for(let p=0;p<y;p++){const b=await n(`${c}/${p}.dat`);await m(b,`Delete chunk ${p} of ${c}`)}await m(u,`Delete length of ${c}`)}async function $(){try{await e("GET",`${s}/repos/${t}/${r}`)}catch{await e("POST",`${s}/user/repos`,{name:r,private:!0,auto_init:!0,default_branch:i})}}return{async init(c){try{return o=c,t=(await e("GET",`${s}/user`)).login,await $(),localStorage.setItem("gh-auth-token",c),!0}catch{return!1}},get:f,set:E,delete:C}})();async function A({width:r,height:i,plainPath:s,pathHash:o,password:t}){document.body.className="frame-body";const n=document.createElement("p");n.textContent=`Do you want to delete "${s}"?`,n.className="confirm-message";const e=document.createElement("button");e.textContent="Yes",e.className="confirm-btn";const a=document.createElement("button");a.textContent="No",a.className="cancel-btn",document.body.innerHTML="",document.body.appendChild(n),document.body.appendChild(e),document.body.appendChild(a),e.addEventListener("click",async()=>{document.body.innerHTML="<h1 class='status success'>Deleting... (max 10s)</h1>";try{await w.delete(o),document.body.innerHTML="<h1 class='status success'>Deleted</h1>",parent.postMessage("ok","*")}catch(d){document.body.innerHTML="<h1 class='status cancelled'>Failed</h1>",parent.postMessage({status:"error",error:d.message},"*")}}),a.addEventListener("click",()=>{document.body.innerHTML="<h1 class='status cancelled'>Cancelled</h1>",parent.postMessage("false","*")})}async function P({width:r,height:i,plainPath:s,pathHash:o,password:t}){document.body.className="frame-body";const n=document.createElement("p");n.textContent=`Do you want to read from "${s}"?`,n.className="confirm-message";const e=document.createElement("button");e.textContent="Yes",e.className="confirm-btn";const a=document.createElement("button");a.textContent="No",a.className="cancel-btn",document.body.innerHTML="",document.body.appendChild(n),document.body.appendChild(e),document.body.appendChild(a),e.addEventListener("click",async()=>{document.body.innerHTML="<h1 class='status success'>Loading... (max 10s)</h1>";try{const d=await w.get(o),m=await L(d,t),h=document.createElement("pre");h.textContent=m,h.className="decrypted-content",document.body.innerHTML="",document.body.appendChild(h),parent.postMessage({status:"ok",data:m},"*")}catch(d){document.body.innerHTML="<h1 class='status cancelled'>Failed</h1>",parent.postMessage({status:"error",error:d.message},"*")}}),a.addEventListener("click",()=>{document.body.innerHTML="<h1 class='status cancelled'>Cancelled</h1>",parent.postMessage("false","*")})}async function v({width:r,height:i,plainPath:s,pathHash:o,encryptedData:t,password:n}){document.body.className="frame-body";const e=await L(t,n),a=document.createElement("p");a.textContent=`Do you want to write to "${s}" with this data:

${e}`,a.className="confirm-message";const d=document.createElement("button");d.textContent="Yes",d.className="confirm-btn";const m=document.createElement("button");m.textContent="No",m.className="cancel-btn",document.body.innerHTML="",document.body.appendChild(a),document.body.appendChild(d),document.body.appendChild(m),d.addEventListener("click",async()=>{document.body.innerHTML="<h1 class='status success'>Loading... (max 10s)</h1>";try{await w.set(o,t),document.body.innerHTML="<h1 class='status success'>Worked</h1>",parent.postMessage("ok","*")}catch(h){document.body.innerHTML="<h1 class='status cancelled'>Failed</h1>",parent.postMessage({status:"error",error:h.message},"*")}}),m.addEventListener("click",()=>{document.body.innerHTML="<h1 class='status cancelled'>Cancelled</h1>",parent.postMessage("false","*")})}function B(){const r=localStorage.getItem("gh-auth-token");return r?Promise.resolve(r):new Promise((i,s)=>{document.body.className="frame-body",document.body.style.width="100%",document.body.style.height="100%",document.body.style.display="flex",document.body.style.alignItems="center",document.body.style.justifyContent="center",document.body.style.backgroundColor="#f4f4f4",document.body.innerHTML="";const o=document.createElement("form");o.className="token-form",o.style.background="#fff",o.style.padding="2rem",o.style.borderRadius="0.5rem",o.style.boxShadow="0 2px 8px rgba(0, 0, 0, 0.1)",o.style.maxWidth="400px",o.style.width="100%",o.style.boxSizing="border-box";const t=document.createElement("p");t.innerHTML=`
      To create a GitHub Personal Access Token, visit:
      <a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener noreferrer">
        https://github.com/settings/tokens/new
      </a>
      <br><br>
      1. Sign in to GitHub.<br>
      2. Click “Generate new token”.<br>
      3. Choose a name and expiration (or “No expiration”).<br>
      4. Select the required scopes (e.g., <code>repo</code> for repository access).<br>
      5. Click “Generate token” and copy the token immediately.<br>
    `,t.style.fontSize="0.9rem",t.style.lineHeight="1.4",t.style.marginBottom="1.5rem";const n=document.createElement("label");n.textContent="Enter GitHub Auth Token:",n.className="token-message",n.setAttribute("for","gh-auth-token"),n.style.display="block",n.style.fontWeight="600",n.style.marginBottom="0.5rem";const e=document.createElement("input");e.type="text",e.name="gh-auth-token",e.id="gh-auth-token",e.className="token-input",e.placeholder="Paste your GitHub token here",e.autofocus=!0,e.required=!0,e.style.width="100%",e.style.padding="0.75rem",e.style.fontSize="1rem",e.style.border="1px solid #ccc",e.style.borderRadius="0.25rem",e.style.marginBottom="1rem",e.style.boxSizing="border-box";const a=document.createElement("button");a.type="submit",a.textContent="Save Token",a.className="confirm-btn",a.style.padding="0.75rem 1.5rem",a.style.fontSize="1rem",a.style.backgroundColor="#2c974b",a.style.color="#fff",a.style.border="none",a.style.borderRadius="0.25rem",a.style.cursor="pointer",a.style.width="100%",a.style.boxSizing="border-box";const d=document.createElement("p");d.className="error-message",d.style.color="red",d.style.height="1.2em",d.style.margin="0.5em 0 0 0",d.style.fontSize="0.9rem",o.appendChild(t),o.appendChild(n),o.appendChild(e),o.appendChild(a),o.appendChild(d),document.body.appendChild(o),o.addEventListener("submit",m=>{m.preventDefault(),d.textContent="";const h=e.value.trim();if(!h){d.textContent="Token cannot be empty";return}localStorage.setItem("gh-auth-token",h),document.body.innerHTML="<h1 class='status success'>Token saved successfully</h1>",i(h)})})}function D(){return new Promise((r,i)=>{document.body.className="frame-body",document.body.style.width="100%",document.body.style.height="100%",document.body.innerHTML="";const s=document.createElement("form");s.className="password-form";const o=document.createElement("label");o.textContent="Enter password:",o.className="confirm-message",o.setAttribute("for","encryption-password");const t=document.createElement("input");t.type="password",t.name="encryption-password",t.id="encryption-password",t.className="password-input",t.placeholder="Password",t.autofocus=!0,t.required=!0;const n=document.createElement("button");n.type="submit",n.textContent="OK",n.className="confirm-btn";const e=document.createElement("p");e.className="error-message",e.style.color="red",e.style.height="1.2em",e.style.margin="0.5em 0 0 0",s.appendChild(o),s.appendChild(t),s.appendChild(n),s.appendChild(e),document.body.appendChild(s);async function a(d){const h=new TextEncoder().encode(d),f=await crypto.subtle.digest("SHA-512",h);return Array.from(new Uint8Array(f)).map(C=>C.toString(16).padStart(2,"0")).join("")}s.addEventListener("submit",async d=>{d.preventDefault(),e.textContent="";const m=t.value;if(!m){e.textContent="Password cannot be empty";return}const h=await a(m),f=localStorage.getItem("encryption-password-hash");f?f===h?(document.body.innerHTML="<h1 class='status success'>Password verified</h1>",r(m)):(e.textContent="Password incorrect, please try again.",t.value="",t.focus()):(localStorage.setItem("encryption-password-hash",h),document.body.innerHTML="<h1 class='status success'>Password stored</h1>",r(m))})})}function x(r){return document.body.style.color="red",document.body.innerText=r,console.error(r),!1}const g=new URL(`https://gh-acces.duckdns.org/${new URL(document.location).hash.replace("#","")}`);async function U(r){const i=new TextEncoder().encode(r),s=await crypto.subtle.digest("SHA-256",i);return Array.from(new Uint8Array(s)).map(t=>t.toString(16).padStart(2,"0")).join("")}async function F(){const r=g.searchParams.get("w")||innerWidth,i=g.searchParams.get("h")||innerHeight,s=g.searchParams.get("p"),o=g.searchParams.get("data"),t=g.searchParams.get("fn");if(!t)return x("url search param fn (function set/get/delete) has to be set");if(!s)return x("url search param p (path) has to be set");const n=await D(),e=await U(s),a=o?await N(o,n):null;for(;!await w.init(await B()););if(t==="delete")await A({width:r,height:i,plainPath:s,pathHash:e,password:n});else if(t==="get")await P({width:r,height:i,plainPath:s,pathHash:e,password:n});else if(t==="set"){if(!a)return x("url search param data has to be set for set()");await v({width:r,height:i,plainPath:s,pathHash:e,encryptedData:a,password:n})}return!0}F();
