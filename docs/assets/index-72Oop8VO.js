(function(){const i=document.createElement("link").relList;if(i&&i.supports&&i.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))d(e);new MutationObserver(e=>{for(const t of e)if(t.type==="childList")for(const n of t.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&d(n)}).observe(document,{childList:!0,subtree:!0});function s(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?t.credentials="include":e.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function d(e){if(e.ep)return;e.ep=!0;const t=s(e);fetch(e.href,t)}})();const H=new TextEncoder,N=new TextDecoder;async function x(o){const i=await crypto.subtle.digest("SHA-256",H.encode(o)),s=await crypto.subtle.digest("SHA-256",i);return crypto.subtle.importKey("raw",s,{name:"AES-CBC"},!1,["encrypt","decrypt"])}async function k(o,i){const s=crypto.getRandomValues(new Uint8Array(16)),d=await x(i),e=H.encode(o),t=await crypto.subtle.encrypt({name:"AES-CBC",iv:s},d,e),n=new Uint8Array(s.length+t.byteLength);return n.set(s,0),n.set(new Uint8Array(t),s.length),btoa(String.fromCharCode(...n))}async function M(o,i){const s=Uint8Array.from(atob(o),c=>c.charCodeAt(0)),d=s.slice(0,16),e=s.slice(16),t=await x(i),n=await crypto.subtle.decrypt({name:"AES-CBC",iv:d},t,e);return N.decode(n)}const w=(()=>{const o="data-data",i="main",s="https://api.github.com";let d="",e="";function t(a){return crypto.subtle.digest("SHA-256",new TextEncoder().encode(a)).then(l=>Array.from(new Uint8Array(l)).map(r=>r.toString(16).padStart(2,"0")).join(""))}async function n(a,l,r=null){const h=await fetch(l,{method:a,headers:{Authorization:`Bearer ${d}`,Accept:"application/vnd.github+json","Content-Type":"application/json"},body:r?JSON.stringify(r):void 0});if(!h.ok)throw new Error(await h.text());return h.json()}async function c(a){try{return await n("GET",`${s}/repos/${e}/${o}/contents/${a}?ref=${i}`)}catch{return null}}async function u(a,l){const r=await c(a),h={message:new Date,content:btoa(l),branch:i};return r&&(h.sha=r.sha),n("PUT",`${s}/repos/${e}/${o}/contents/${a}`,h)}async function m(a,l){const r=await c(a);if(!r)return;const h={message:l,sha:r.sha,branch:i};return n("DELETE",`${s}/repos/${e}/${o}/contents/${a}`,h)}async function p(a){const l=[];for(let r=0;r<a.length;r+=1e5)l.push(a.slice(r,r+1e5));return l}async function g(a){const l=await t(`${a}/length.dat`),r=await c(l);if(!r)return null;const h=parseInt(atob(r.content));let y="";for(let f=0;f<h;f++){const A=await t(`${a}/${f}.dat`),$=await c(A);if(!$)break;y+=atob($.content)}return y}async function L(a,l){const r=await p(l);for(let y=0;y<r.length;y++){const f=await t(`${a}/${y}.dat`);await u(f,r[y])}const h=await t(`${a}/length.dat`);await u(h,String(r.length))}async function C(a){const l=await t(`${a}/length.dat`),r=await c(l);if(!r)return;const h=parseInt(atob(r.content));for(let y=0;y<h;y++){const f=await t(`${a}/${y}.dat`);await m(f,`Delete chunk ${y} of ${a}`)}await m(l,`Delete length of ${a}`)}async function T(){try{await n("GET",`${s}/repos/${e}/${o}`)}catch{await n("POST",`${s}/user/repos`,{name:o,private:!0,auto_init:!0,default_branch:i})}}return{async init(a){try{return d=a,e=(await n("GET",`${s}/user`)).login,await T(),localStorage.setItem("gh-auth-token",a),!0}catch{return!1}},get:g,set:L,delete:C}})();async function S({width:o,height:i,plainPath:s,pathHash:d,password:e}){document.body.className="frame-body";const t=document.createElement("p");t.textContent=`Do you want to delete "${s}"?`,t.className="confirm-message";const n=document.createElement("button");n.textContent="Yes",n.className="confirm-btn";const c=document.createElement("button");c.textContent="No",c.className="cancel-btn",document.body.innerHTML="",document.body.appendChild(t),document.body.appendChild(n),document.body.appendChild(c),n.addEventListener("click",async()=>{document.body.innerHTML="<h1 class='status success'>Deleting... (max 10s)</h1>";try{await w.delete(d),document.body.innerHTML="<h1 class='status success'>Deleted</h1>",parent.postMessage("ok","*")}catch(u){document.body.innerHTML="<h1 class='status cancelled'>Failed</h1>",parent.postMessage({status:"error",error:u.message},"*")}}),c.addEventListener("click",()=>{document.body.innerHTML="<h1 class='status cancelled'>Cancelled</h1>",parent.postMessage("false","*")})}async function P({width:o,height:i,plainPath:s,pathHash:d,password:e}){document.body.className="frame-body";const t=document.createElement("p");t.textContent=`Do you want to read from "${s}"?`,t.className="confirm-message";const n=document.createElement("button");n.textContent="Yes",n.className="confirm-btn";const c=document.createElement("button");c.textContent="No",c.className="cancel-btn",document.body.innerHTML="",document.body.appendChild(t),document.body.appendChild(n),document.body.appendChild(c),n.addEventListener("click",async()=>{document.body.innerHTML="<h1 class='status success'>Loading... (max 10s)</h1>";try{const u=await w.get(d),m=await M(u,e),p=document.createElement("pre");p.textContent=m,p.className="decrypted-content",document.body.innerHTML="",document.body.appendChild(p),parent.postMessage({status:"ok",data:m},"*")}catch(u){document.body.innerHTML="<h1 class='status cancelled'>Failed</h1>",parent.postMessage({status:"error",error:u.message},"*")}}),c.addEventListener("click",()=>{document.body.innerHTML="<h1 class='status cancelled'>Cancelled</h1>",parent.postMessage("false","*")})}async function v({width:o,height:i,plainPath:s,pathHash:d,encryptedData:e,password:t}){document.body.className="frame-body";const n=await M(e,t),c=document.createElement("p");c.textContent=`Do you want to write to "${s}" with this data:

${n}`,c.className="confirm-message";const u=document.createElement("button");u.textContent="Yes",u.className="confirm-btn";const m=document.createElement("button");m.textContent="No",m.className="cancel-btn",document.body.innerHTML="",document.body.appendChild(c),document.body.appendChild(u),document.body.appendChild(m),u.addEventListener("click",async()=>{document.body.innerHTML="<h1 class='status success'>Loading... (max 10s)</h1>";try{await w.set(d,e),document.body.innerHTML="<h1 class='status success'>Worked</h1>",parent.postMessage("ok","*")}catch(p){document.body.innerHTML="<h1 class='status cancelled'>Failed</h1>",parent.postMessage({status:"error",error:p.message},"*")}}),m.addEventListener("click",()=>{document.body.innerHTML="<h1 class='status cancelled'>Cancelled</h1>",parent.postMessage("false","*")})}function D(){return new Promise((o,i)=>{document.body.className="frame-body",document.body.style.width="100%",document.body.style.height="100%",document.body.innerHTML="";const s=document.createElement("form");s.className="password-form";const d=document.createElement("label");d.textContent="Enter password:",d.className="confirm-message",d.setAttribute("for","encryption-password");const e=document.createElement("input");e.type="password",e.name="encryption-password",e.id="encryption-password",e.className="password-input",e.placeholder="Password",e.autofocus=!0,e.required=!0;const t=document.createElement("button");t.type="submit",t.textContent="OK",t.className="confirm-btn";const n=document.createElement("p");n.className="error-message",n.style.color="red",n.style.height="1.2em",n.style.margin="0.5em 0 0 0",s.appendChild(d),s.appendChild(e),s.appendChild(t),s.appendChild(n),document.body.appendChild(s);async function c(u){const p=new TextEncoder().encode(u),g=await crypto.subtle.digest("SHA-512",p);return Array.from(new Uint8Array(g)).map(C=>C.toString(16).padStart(2,"0")).join("")}s.addEventListener("submit",async u=>{u.preventDefault(),n.textContent="";const m=e.value;if(!m){n.textContent="Password cannot be empty";return}const p=await c(m),g=localStorage.getItem("encryption-password-hash");g?g===p?(document.body.innerHTML="<h1 class='status success'>Password verified</h1>",parent.postMessage("ok","*"),o(m)):(n.textContent="Password incorrect, please try again.",e.value="",e.focus(),parent.postMessage("false","*")):(localStorage.setItem("encryption-password-hash",p),document.body.innerHTML="<h1 class='status success'>Password stored</h1>",parent.postMessage("ok","*"),o(m))})})}function E(o){return document.body.style.color="red",document.body.innerText=o,console.error(o),!1}const b=new URL(`https://gh-acces.duckdns.org/${new URL(document.location).hash.replace("#","")}`);async function B(o){const i=new TextEncoder().encode(o),s=await crypto.subtle.digest("SHA-256",i);return Array.from(new Uint8Array(s)).map(e=>e.toString(16).padStart(2,"0")).join("")}async function U(){const o=b.searchParams.get("w")||innerWidth,i=b.searchParams.get("h")||innerHeight,s=b.searchParams.get("p"),d=b.searchParams.get("data"),e=b.searchParams.get("fn");if(!e)return E("url search param fn (function set/get/delete) has to be set");if(!s)return E("url search param p (path) has to be set");const t=await D(),n=await B(s),c=d?await k(d,t):null;for(;!await w.init(localStorage.getItem("gh-auth-token")||prompt("Input GitHub auth token: https://github.com/settings/tokens/new")););if(e==="delete")await S({width:o,height:i,plainPath:s,pathHash:n,password:t});else if(e==="get")await P({width:o,height:i,plainPath:s,pathHash:n,password:t});else if(e==="set"){if(!c)return E("url search param data has to be set for set()");await v({width:o,height:i,plainPath:s,pathHash:n,encryptedData:c,password:t})}return!0}U();
